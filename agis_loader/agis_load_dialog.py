# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ArheoloskiGisDialog
                                 A QGIS plugin
 This plugin loads useful layers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-02-22
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Matjaž Mori, ZVKDS CPA
        email                : matjaz.mori@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
#from qgis.PyQt import QtWidgets

from pathlib import Path
from qgis.PyQt import QtWidgets, QtCore, QtGui

from qgis.PyQt.QtCore import  QCoreApplication, Qt
#from qgis.PyQt.QtGui import QIcon, QPixmap, QStandardItemModel

from qgis.gui import *
from qgis.utils import iface
from qgis.PyQt.QtWidgets import *
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *


class ArheoloskiGisLoadDialog(QtWidgets.QDialog):
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        
        return QCoreApplication.translate('ArheoloskiGis', message)
               
    def __init__(self):
        super(ArheoloskiGisLoadDialog, self).__init__()
        self.iface = iface
        self.logo_path = 'c:/icon_load.png'
        self.agis_directory = Path(os.path.expanduser( '~' ))/'AGIS data'
        #self.plugin_dir = os.path.dirname(__file__)
        self.MESSAGE_CATEGORY = 'AGIS'
        
        self.main_window = QWidget()
        self.main_window.setWindowTitle("Load layers")
        self.layout_box = QVBoxLayout(self.main_window)
        self.button_box = QDialogButtonBox()
        self.button_box.setOrientation(Qt.Horizontal)
        self.button_box.setStandardButtons(QDialogButtonBox.Cancel | QDialogButtonBox.Ok)
        #def populate_layers (self):
        #super().__init__()
        
        self.tabs = QTabWidget()
        self.tab1 = QWidget()
        self.tab2 = QWidget()
        self.tab3 = QWidget()
        self.logo_label = QLabel()
        

    def window(self):
        pixmap = QPixmap(str(self.logo_path))
        pixmap = pixmap.scaledToWidth(50)
        self.logo_label.setPixmap(pixmap)
        self.logo_label.setAlignment(QtCore.Qt.AlignRight)
        
        #TAB 1
        self.tab1.layout = QVBoxLayout()
        self.b1 = QCheckBox(self.tr('Dediščina'))
        self.b1.setChecked(True)
        self.b1.stateChanged.connect(lambda:self.btnstate(self.b1))
        self.tab1.layout.addWidget(self.b1)
        self.tab1.setLayout(self.tab1.layout)
        
        self.b2 = QCheckBox(self.tr('Podlage (DOF, DTK, ZLS)'))
        self.b2.setChecked(True)
        self.b2.stateChanged.connect(lambda:self.btnstate(self.b2))
        self.tab1.layout.addWidget(self.b2)
        #self.tab1.setLayout(self.tab1.layout) 
  
        self.b3 = QCheckBox(self.tr('Historične podlage (Franciscejski kataster, AO topo)'))
        self.b3.setChecked(True)
        self.b3.stateChanged.connect(lambda:self.btnstate(self.b3))
        self.tab1.layout.addWidget(self.b3)
        #self.tab1.setLayout(self.tab1.layout)   
  
        self.b4 = QCheckBox(self.tr('Prostorske enote (Meja, Občine, Naselja, Zemljiški kataster)'))
        self.b4.setChecked(True)
        self.b4.stateChanged.connect(lambda:self.btnstate(self.b4))
        self.tab1.layout.addWidget(self.b4)
        #self.tab1.setLayout(self.tab1.layout)
        
        """
        self.b5 = QCheckBox(self.tr('Skupina slojev po meri 1'))
        self.b5.setChecked(False)
        self.b5.stateChanged.connect(lambda:self.btnstate(self.b5))
        self.tab1.layout.addWidget(self.b5)
        
        
        self.b6 = QCheckBox(self.tr('Skupina slojev po meri 2'))
        self.b6.setChecked(False)
        self.b6.stateChanged.connect(lambda:self.btnstate(self.b6))
        self.tab1.layout.addWidget(self.b6)
        """    
        
        
        #self.button_box.setOrientation(Qt.Horizontal)
        #self.button_box.setStandardButtons(QDialogButtonBox.Cancel | QDialogButtonBox.Ok)"
        #self.button_box.accepted.connect(self.tab1_accept)
        #self.button_box.rejected.connect(self.tab1_reject)

        self.tab1.layout.addWidget(self.button_box)
        #self.tab1.setLayout(self.tab1.layout)
        
        
        
        #TAB 2
        self.tab2.main_layout = QVBoxLayout()        
        self.tab2.vlayout = QVBoxLayout()
        self.tab2.hlayout = QHBoxLayout()
        
        self.help_label = QLabel()
        self.help_label.setText(self.tr('Dvojni klik za nalaganje sloja, desni klik za oodstranitev iz seznama. \nSloji izpisani odebeljeno so del vtičnika in jih ni mogoče odstraniti.'))
        layers_list = [['1', 'sdasd',1], ['2', 'adsdd',0], ['3', 'sdda',1], ['4', 'sddasdsdfd fgfdg fdg fdg dfg dfg dfg d',0],['1', 'sdasd',0], ['2', 'adsdd',1], ['3', 'sdda',0], ['4', 'sddasdsdfd fgfdg fdg fdg dfg dfg dfg d',1],['1', 'sdasd',1]]
        self.modelp = QStandardItemModel(len(layers_list), 1)
        self.modelp.setHorizontalHeaderLabels([self.tr('Sloj'),self.tr('Vir')])
        
        def populate_table(self, layers_list):
            for row, layer in enumerate(layers_list):
                layer_name = QStandardItem(layer[0])
                layer_source = QStandardItem(layer[1])
                colore = QColor(200,200,200)
                if layer[2] == 1:
                    layer_name.setBackground(colore)
                    layer_source.setBackground(colore)
                self.modelp.setItem(row, 0, layer_name)
                self.modelp.setItem(row, 1, layer_source)
       
        populate_table(self, layers_list)
        
        self.filter_proxy_model = QSortFilterProxyModel()
        self.filter_proxy_model.setSourceModel(self.modelp)
        self.filter_proxy_model.setFilterCaseSensitivity(Qt.CaseInsensitive)
        self.filter_proxy_model.setFilterKeyColumn(0)
        
        search_field = QLineEdit()  
        #search_field.setStyleSheet('font-size: 35px; height: 60px;')
        search_field.textChanged.connect(self.filter_proxy_model.setFilterRegExp)
        
        self.table = QTableView()
        self.table.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table.setModel(self.filter_proxy_model)  
        self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        #self.table.doubleClicked.connect(self.table_double_clicked)



        self.table.setContextMenuPolicy(Qt.CustomContextMenu)


        def contextMenuEvent(pos):
            if self.table.selectionModel().selection().indexes():
                for i in self.table.selectionModel().selection().indexes():
                    row, column = i.row(), i.column()
                menu = QMenu()
                deleAction = menu.addAction(self.tr('Izbriši'))
                action = menu.exec_(self.table.mapToGlobal(pos))
                if action ==deleAction:
                    deleteAction(row, column)
    
        def deleteAction(row, column):
            sel_layer_name = self.table.model().index(row, 0)
            sel_layer_name = self.table.model().data(sel_layer_name)
            print(str(sel_layer_name))
                                
 
 
        self.table.customContextMenuRequested.connect(contextMenuEvent)
        
          
        
        self.s1 = QLabel(self.tr('Išči po sloju'))

        self.tab2.vlayout.addWidget(self.help_label)
        self.tab2.hlayout.addWidget(self.s1)
        self.tab2.hlayout.addWidget(search_field)
        
        self.tab2.main_layout.addLayout(self.tab2.vlayout)
        self.tab2.main_layout.addLayout(self.tab2.hlayout)
        self.tab2.main_layout.addWidget(self.table)
    
        self.tab2.setLayout(self.tab2.main_layout)
    
        
    
        
        #TAB 3
        tab3_main_layout = QVBoxLayout()
        tab3_hlayout1 = QHBoxLayout()
        
        tab3_vlayout1 = QVBoxLayout()
        tab3_grid_layout1 = QGridLayout()
        
        def clearLayout(layout):
            if layout is not None:
                while layout.count():
                    item = layout.takeAt(0)
                    widget = item.widget()
                    if widget is not None:
                        widget.deleteLater()
                    else:
                        clearLayout(item.layout())
                
        def onRbClicked():
            clearLayout(tab3_vlayout1)
            self.sel_layer = QgsMapLayerComboBox()
            layer_name_label = QLabel(self.tr('Ime sloja'))
            layer_source_label = QLabel(self.tr('Vir sloja (opcijsko)'))
            self.layer_source = QLineEdit() 
            self.layer_name = QLineEdit() 
            
            def on_field_changed(layer):
                self.layer_name.setText(layer.name()) 
            
            tab3_grid_layout1.addWidget(layer_name_label,0,0)
            tab3_grid_layout1.addWidget(self.layer_name,0,1)
            self.sel_layer.layerChanged.connect(on_field_changed)
        
            tab3_grid_layout1.addWidget(layer_source_label,1,0)
            tab3_grid_layout1.addWidget(self.layer_source,1,1)
            
            tab3_vlayout1.addLayout(tab3_hlayout1)
            tab3_vlayout1.addWidget(self.sel_layer)
            tab3_vlayout1.addLayout(tab3_grid_layout1)
            tab3_main_layout.addLayout(tab3_vlayout1)
            tab3_main_layout.addWidget(button_box_tab3)
            self.tab3.setLayout(tab3_main_layout)
            
            

         
                
        self.rb_layer = QRadioButton(self.tr('Dodaj sloj'))
        self.rb_layer.setChecked(True)
        self.rb_layer.value = 'Layer'
        self.rb_layer.clicked.connect(onRbClicked)
        
        self.rb_qlr = QRadioButton(self.tr('Dodaj .qlr'))
        self.rb_qlr.value = 'qlr'
        self.rb_qlr.clicked.connect(self.onQlrClicked)
        
        tab3_hlayout1.addWidget(self.rb_layer)
        tab3_hlayout1.addWidget(self.rb_qlr)
        
       
        button_box_tab3 = QDialogButtonBox()
        button_box_tab3.setOrientation(Qt.Horizontal)
        button_box_tab3.setStandardButtons(QDialogButtonBox.Cancel | QDialogButtonBox.Ok)
        #button_box_tab3.accepted.connect(self.tab3_accept)
        button_box_tab3.rejected.connect(self.tab3_reject)
        
        tab3_main_layout.addLayout(tab3_hlayout1)
        
        
        if self.rb_layer.isChecked:
            onRbClicked()
            
 
        
        ###
        self.tabs.addTab(self.tab1,self.tr('Naloži skupine'))
        self.tabs.addTab(self.tab2,self.tr('Naloži posamezne sloje'))
        self.tabs.addTab(self.tab3,self.tr('Dodaj sloj'))
        self.layout_box.addWidget(self.logo_label)
        self.layout_box.addWidget(self.tabs)        
        
        self.main_window.setWindowTitle("Load layers")
    
        return self.main_window
        
    def onQlrClicked(self):
        clearLayout(tab3_vlayout1)
        clearLayout(tab3_grid_layout1)
        sel_file = QgsFileWidget()
        sel_file.setFilter('*.qlr')
        sel_file.setDialogTitle(self.tr('Izberi .qlr datoteko'))
            
        layer_name_label = QLabel(self.tr('Ime sloja'))
        layer_source_label = QLabel(self.tr('Vir sloja (opcijsko)'))
        layer_source = QLineEdit() 
        layer_name = QLineEdit() 
        
    
        tab3_grid_layout1.addWidget(layer_name_label,0,0)
        tab3_grid_layout1.addWidget(layer_name,0,1)
    
        tab3_grid_layout1.addWidget(layer_source_label,1,0)
        tab3_grid_layout1.addWidget(layer_source,1,1)
        
        tab3_vlayout1.addLayout(tab3_hlayout1)
        tab3_vlayout1.addWidget(sel_file)
        tab3_vlayout1.addLayout(tab3_grid_layout1)
        tab3_main_layout.addLayout(tab3_vlayout1)
        tab3_main_layout.addWidget(button_box_tab3)
        self.tab3.setLayout(tab3_main_layout)
        print(str(sel_file.selectedFiles()))


    def tab1_accept(self):
        self.iface.messageBar().pushMessage('sasa')
        
    def tab1_reject(self):
        self.iface.messageBar().pushMessage('asasassa')
        w.close()
        
    def tab3_accept(self):
        self.agis_directory.mkdir(parents=True, exist_ok=True)
        
        if self.rb_layer.isChecked():
            root = QgsProject.instance().layerTreeRoot()
            node = root.findLayer(self.sel_layer.currentLayer())

            layer_name = self.layer_name.text()
            file_name = "".join(x for x in layer_name if x.isalnum()) + '.qlr'
            
            destination = self.agis_directory/file_name
            QgsLayerDefinition().exportLayerDefinition(str(destination), [node])
            print('layer')
        else:
            print('qlr')
        
     
       
        
        
        QgsLayerDefinition().exportLayerDefinition("c:/path/of/file.qlr", [current_node])
        print(agis_directory)
        
    def tab3_reject(self):
        self.iface.messageBar().pushMessage(self.tr("aaaaaaaaaaaaaa"))
        self.window().close()
        
    def table_clicked(self):
        print('zmaga1')
        
    def table_double_clicked(self):
        print('zmaga2')
        
